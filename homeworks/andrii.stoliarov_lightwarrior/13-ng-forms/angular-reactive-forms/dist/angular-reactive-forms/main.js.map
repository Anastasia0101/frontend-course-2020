{"version":3,"sources":["./src/environments/environment.ts","./src/app/services/encode-data-form.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/index.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { Form } from '../interfaces/form.interface';\n\n@Injectable()\nexport class EncodeDataFormService {\n  private encodedDataEmail: string = '';\n  private encodedDataPassword: string = '';\n\n  setDataLocalStorage(data: Form): void {\n    this.encodedDataEmail = window.btoa(data.email);\n    this.encodedDataPassword = window.btoa(data.password);\n\n    localStorage.setItem('email', this.encodedDataEmail);\n    localStorage.setItem('password', this.encodedDataPassword);\n  }\n\n  getDecodedDataEmail(): string {\n    const getLocalStorageEmail: string = localStorage.getItem('email') || '';\n\n    return window.atob(getLocalStorageEmail);\n  }\n\n  getDecodedDataPassword(): string {\n    const getLocalStoragePassword: string = localStorage.getItem('password') || '';\n\n    return window.atob(getLocalStoragePassword);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { EncodeDataFormService } from './services';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  form: any;\n  private dataEmail: string = '';\n  private dataPassword: string = '';\n\n  constructor(private fb: FormBuilder, private encodeDataFormService: EncodeDataFormService) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      email: new FormControl('', [\n        Validators.email,\n        Validators.required\n      ]),\n      password: new FormControl('', [\n        Validators.required\n      ]),\n      checkbox: new FormControl(false, [\n        Validators.required\n      ])\n    });\n\n    this.dataEmail = this.encodeDataFormService.getDecodedDataEmail();\n    this.dataPassword = this.encodeDataFormService.getDecodedDataPassword();\n\n    this.form.patchValue({\n      email: this.dataEmail,\n      password: this.dataPassword\n    });\n  }\n\n  isControlInvalid(fieldName: string): boolean {\n    return (this.form.get(fieldName).invalid && this.form.get(fieldName).touched);\n  }\n\n  isRequired(fieldName: string): boolean {\n    return this.form.get(fieldName).errors.required;\n  }\n\n  isErrors(fieldName: string): boolean {\n    return this.form.get(fieldName).errors.email;\n  }\n\n  getFieldRequiredError(fieldName: string): string {\n    return 'The field cannot be empty.';\n  }\n\n  getFieldError(fieldName: string): string {\n    return 'Enter correct email.';\n  }\n\n\n  submit() {\n    if (this.form.invalid) return;\n\n    const formData = {...this.form.value};\n\n    alert(`Login successfully. Email: ${formData.email}, password: ${formData.password}`)\n\n    if (formData.checkbox) {\n      this.encodeDataFormService.setDataLocalStorage(formData);\n    }\n\n   this.form.reset();\n  }\n\n}\n","<div class=\"container\">\n  <h1>Angular reactive forms</h1>\n\n  <form class=\"form-container\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <div class=\"form-control\">\n      <label for=\"emailCaption\">Email: </label>\n      <input id=\"emailCaption\" class=\"field-input\" type=\"text\" placeholder=\"enter email\" formControlName=\"email\">\n      <div\n        *ngIf=\"isControlInvalid('email')\"\n        class=\"validation\"\n      >\n        <small *ngIf=\"isRequired('email')\">\n          {{ getFieldRequiredError('email') }}\n        </small>\n        <small *ngIf=\"isErrors('email')\">\n          {{ getFieldError('email') }}\n        </small>\n      </div>\n    </div>\n\n    <div class=\"form-control\">\n      <label for=\"passwordCaption\">Password: </label>\n      <input id=\"passwordCaption\" class=\"field-input\" type=\"password\" placeholder=\"enter password\" formControlName=\"password\">\n      <div\n        *ngIf=\"isControlInvalid('password')\"\n        class=\"validation\"\n      >\n        <small *ngIf=\"isRequired('password')\">\n          {{ getFieldRequiredError('password') }}\n        </small>\n    </div>\n    </div>\n\n    <div class=\"form-control\">\n      <input id=\"checkboxCaption\" type=\"checkbox\" formControlName=\"checkbox\">\n      <label for=\"checkboxCaption\"> remember me</label>\n    </div>\n\n    <button class=\"btn\" type=\"submit\" [disabled]=\"form.invalid\">Login</button>\n  </form>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { appServices } from './services';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    ...appServices\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { EncodeDataFormService } from './encode-data-form.service';\n\nexport const appServices = [\n  EncodeDataFormService\n];\n\nexport * from './encode-data-form.service';\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}